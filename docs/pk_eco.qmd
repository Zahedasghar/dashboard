---
title: "Pakistan Economic Observatory"
#subtitle: "Real-time Economic Analysis & Policy Insights"
author: "Dr. Zahid Asghar"
affiliation: "School of Economics, Quaid-i-Azam University"
format: 
  dashboard:
    orientation: columns
    scrolling: true
    theme: [default, custom.scss]
    logo: "https://upload.wikimedia.org/wikipedia/commons/3/32/Flag_of_Pakistan.svg"
    nav-buttons:
      - icon: github
        href: https://github.com/zahedasghar
      - icon: twitter
        href: https://twitter.com/zahedasghar
execute:
  freeze: auto
  echo: false
  warning: false
  message: false
---

```{r}
#| include: false
#| setup: true

options(future.globals.maxSize = 891289600) # Increase max size for large datasets
library(future)
library(parallel)

# Set up parallel processing
plan(multisession, workers = availableCores() - 1) # Use all cores except the first one
```

```{r}
#| include: false
# Load required libraries
library(tidyverse)
library(WDI)
library(plotly)
library(DT)
library(kableExtra)
library(scales)
library(lubridate)
library(readxl)

# Set Pakistan country code
country_code <- "PK"

# Function to safely fetch WDI data and standardize column names
fetch_wdi_safe <- function(indicator, country = "PK", start = 1990, end = 2024) {
  tryCatch({
    # Fetch data from WDI
    wdi_data <- WDI(country = country, indicator = indicator, start = start, end = end)
    
    # Standardize column names - WDI returns indicator code as column name
    if(ncol(wdi_data) >= 5) {
      # Find the indicator column (usually the 5th column after country, iso2c, iso3c, year)
      indicator_col <- names(wdi_data)[5]
      wdi_data <- wdi_data %>%
        rename(value = all_of(indicator_col)) %>%
        select(country, iso2c, year, value)
    }
    
    return(wdi_data)
    
  }, error = function(e) {
    # Return mock data structure if API fails
    tibble(
      country = "Pakistan",
      iso2c = "PK",
      year = 1990:2024,
      value = NA
    )
  })
}

# Alternative function for multiple indicators at once (more efficient)
fetch_wdi_multiple <- function(indicators_list, country = "PK", start = 1990, end = 2024) {
  tryCatch({
    # Fetch all indicators at once
    all_indicators <- unname(unlist(indicators_list))
    wdi_data <- WDI(country = country, indicator = all_indicators, start = start, end = end)
    
    # Reshape to long format with standardized names
    wdi_long <- wdi_data %>%
      select(-iso3c) %>%  # Remove iso3c if present
      pivot_longer(
        cols = -c(country, iso2c, year),
        names_to = "indicator_code", 
        values_to = "value"
      ) %>%
      # Map indicator codes back to readable names
      mutate(
        indicator = case_when(
          indicator_code == "NY.GDP.MKTP.KD.ZG" ~ "gdp_growth",
          indicator_code == "NY.GDP.MKTP.CD" ~ "gdp_current", 
          indicator_code == "NY.GDP.PCAP.CD" ~ "gdp_per_capita",
          indicator_code == "FP.CPI.TOTL.ZG" ~ "inflation",
          indicator_code == "SL.UEM.TOTL.ZS" ~ "unemployment",
          indicator_code == "NE.EXP.GNFS.CD" ~ "exports",
          indicator_code == "NE.IMP.GNFS.CD" ~ "imports",
          indicator_code == "NE.RSB.GNFS.CD" ~ "trade_balance",
          indicator_code == "BN.CAB.XOKA.CD" ~ "current_account",
          indicator_code == "BX.KLT.DINV.CD.WD" ~ "fdi",
          indicator_code == "SP.POP.TOTL" ~ "population",
          indicator_code == "SP.URB.TOTL.IN.ZS" ~ "urban_pop",
          indicator_code == "SP.DYN.LE00.IN" ~ "life_expectancy",
          indicator_code == "SE.ADT.LITR.ZS" ~ "literacy",
          indicator_code == "SI.POV.NAHC" ~ "poverty_rate",
          indicator_code == "PA.NUS.FCRF" ~ "exchange_rate",
          indicator_code == "GC.BAL.CASH.GD.ZS" ~ "fiscal_balance",
          indicator_code == "DT.DOD.DECT.CD" ~ "external_debt",
          TRUE ~ indicator_code
        )
      ) %>%
      select(-indicator_code)
    
    return(wdi_long)
    
  }, error = function(e) {
    # Return mock data if API fails
    tibble(
      country = "Pakistan",
      iso2c = "PK", 
      year = rep(1990:2024, length(indicators_list)),
      indicator = rep(names(indicators_list), each = 35),
      value = NA
    )
  })
}

# Enhanced indicator list with trade and additional metrics
indicators <- list(
  # Core Economic Indicators
  gdp_growth = "NY.GDP.MKTP.KD.ZG",
  gdp_current = "NY.GDP.MKTP.CD",
  gdp_per_capita = "NY.GDP.PCAP.CD",
  inflation = "FP.CPI.TOTL.ZG",
  unemployment = "SL.UEM.TOTL.ZS",
  
  # Trade Indicators
  exports = "NE.EXP.GNFS.CD",
  imports = "NE.IMP.GNFS.CD",
  trade_balance = "NE.RSB.GNFS.CD",
  current_account = "BN.CAB.XOKA.CD",
  fdi = "BX.KLT.DINV.CD.WD",
  
  # Social Indicators
  population = "SP.POP.TOTL",
  urban_pop = "SP.URB.TOTL.IN.ZS",
  life_expectancy = "SP.DYN.LE00.IN",
  literacy = "SE.ADT.LITR.ZS",
  poverty_rate = "SI.POV.NAHC",
  
  # Financial Indicators
  exchange_rate = "PA.NUS.FCRF",
  fiscal_balance = "GC.BAL.CASH.GD.ZS",
  external_debt = "DT.DOD.DECT.CD"
)

# Fetch WDI data using the more efficient multiple indicator approach with caching
if(file.exists("pakistan_economic_data_enhanced.csv")) {
  economic_data <- read_csv("pakistan_economic_data_enhanced.csv", show_col_types = FALSE)
} else {
  economic_data <- fetch_wdi_multiple(indicators)
  write_csv(economic_data, "pakistan_economic_data_enhanced.csv")
}

# Updated SBP (State Bank of Pakistan) Data with current figures
sbp_data <- tibble(
  year = 2020:2024,
  policy_rate = c(7.0, 7.25, 15.0, 22.0, 11.0),  # Updated Dec 2024 rate
  money_supply_growth = c(16.4, 13.2, 9.8, 18.5, 12.3),
  credit_to_private_sector = c(8.2, 7.8, -1.2, 3.4, 8.9),
  forex_reserves = c(20.1, 17.8, 9.8, 13.4, 11.2),
  exchange_rate_pkr_usd = c(160.5, 177.9, 224.8, 283.4, 278.6),
  current_account_balance = c(-1.1, 0.8, -4.6, 0.5, -0.7),
  remittances = c(23.1, 29.4, 31.2, 27.0, 30.2)
)

# Updated Ministry of Finance Data
mof_data <- tibble(
  year = 2020:2024,
  fiscal_deficit = c(-8.1, -7.1, -7.9, -6.6, -5.9),  # Updated FY2024
  debt_to_gdp = c(89.2, 91.5, 95.1, 92.8, 85.2),     # Updated
  tax_revenue_growth = c(2.3, 8.9, 16.2, 28.4, 12.7),
  development_expenditure = c(3.2, 2.8, 3.1, 3.4, 3.6),
  total_debt_trillion_pkr = c(39.8, 45.2, 54.6, 62.8, 70.2),
  external_debt_billion_usd = c(115.7, 130.8, 126.3, 124.5, 130.2),
  domestic_debt_share = c(65.2, 63.8, 67.4, 69.2, 68.8)
)

# Updated PBS (Pakistan Bureau of Statistics) Data with current inflation
pbs_data <- tibble(
  year = 2020:2024,
  cpi_inflation = c(10.7, 8.9, 12.2, 29.2, 4.5),     # Updated to 4.5%
  food_inflation = c(13.6, 12.4, 13.8, 37.6, 6.8),   # Updated
  large_scale_manufacturing = c(-7.4, 8.8, 10.4, 0.5, 1.2),
  agriculture_growth = c(3.3, 3.5, 4.4, 1.6, 0.56),
  services_growth = c(1.2, 5.7, 6.1, 0.9, 2.99),
  industrial_growth = c(-8.2, 7.8, 7.2, 0.4, 4.77),
  unemployment_rate = c(4.5, 4.3, 6.3, 6.2, 5.8),
  poverty_rate = c(24.3, 23.8, 34.2, 39.4, 35.1)
)

# Current year values for value boxes (updated)
current_year <- 2024
current_policy_rate <- 11.0  # Updated Dec 2024
current_inflation <- 4.5     # Updated Nov 2024
current_fiscal_deficit <- -5.9
current_forex_reserves <- 11.2
current_exchange_rate <- 278.6
current_debt_to_gdp <- 85.2  # Updated

# Create enhanced datasets
gdp_data <- economic_data %>% 
  filter(indicator == "gdp_growth") %>%
  arrange(year) %>%
  filter(!is.na(value))

inflation_data <- economic_data %>% 
  filter(indicator == "inflation") %>%
  arrange(year) %>%
  filter(!is.na(value))

# Enhanced trade data with WDI
trade_data <- economic_data %>%
  filter(indicator %in% c("exports", "imports", "trade_balance")) %>%
  pivot_wider(names_from = indicator, values_from = value) %>%
  mutate(
    trade_deficit = ifelse(is.na(trade_balance), imports - exports, -trade_balance),
    trade_deficit_gdp = (trade_deficit / (economic_data %>% 
      filter(indicator == "gdp_current", year == year) %>% 
      pull(value))) * 100
  ) %>%
  filter(!is.na(exports) & !is.na(imports))

# Poverty and unemployment trends
social_data <- economic_data %>%
  filter(indicator %in% c("unemployment", "poverty_rate")) %>%
  pivot_wider(names_from = indicator, values_from = value) %>%
  filter(!is.na(unemployment) | !is.na(poverty_rate))

# Calculate key statistics
latest_year_wdi <- if(nrow(gdp_data) > 0) max(gdp_data$year, na.rm = TRUE) else 2024
latest_gdp_growth <- gdp_data %>% 
  filter(year == latest_year_wdi) %>% 
  slice_tail(n = 1) %>%
  pull(value) %>% 
  {if(length(.) > 0) round(., 2) else 2.68}

# Create enhanced plots

# 1. Trade Balance Visualization (NEW)
trade_plot <- trade_data %>%
  filter(year >= 2000) %>%
  ggplot(aes(x = year)) +
  geom_col(aes(y = trade_deficit/1e9), fill = "#dc3545", alpha = 0.7, width = 0.8) +
  geom_line(aes(y = (exports/1e9)), color = "#28a745", size = 1.2, alpha = 0.8) +
  geom_line(aes(y = (imports/1e9)), color = "#dc3545", size = 1.2, alpha = 0.8) +
  labs(
    title = "Trade Performance Analysis",
    subtitle = "Exports, Imports & Trade Deficit (WDI Data)",
    x = "Year",
    y = "Billion USD",
    caption = "Source: World Bank WDI | Green: Exports, Red: Imports, Bars: Trade Deficit"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", color = "#01411C"),
    plot.subtitle = element_text(size = 12, color = "#666666"),
    axis.title = element_text(size = 11, face = "bold"),
    panel.grid.minor = element_blank(),
    plot.caption = element_text(size = 9, color = "#888888")
  ) +
  scale_x_continuous(breaks = seq(2000, 2024, 4))

# 2. Social Indicators Plot (NEW)
social_plot <- pbs_data %>%
  select(year, unemployment_rate, poverty_rate) %>%
  pivot_longer(cols = -year, names_to = "indicator", values_to = "value") %>%
  mutate(indicator = case_when(
    indicator == "unemployment_rate" ~ "Unemployment Rate",
    indicator == "poverty_rate" ~ "Poverty Rate"
  )) %>%
  ggplot(aes(x = year, y = value, color = indicator)) +
  geom_line(size = 1.3, alpha = 0.8) +
  geom_point(size = 2.5) +
  scale_color_manual(values = c("Unemployment Rate" = "#17a2b8", 
                               "Poverty Rate" = "#dc3545")) +
  labs(
    title = "Social Development Indicators",
    subtitle = "Unemployment & Poverty Trends",
    x = "Year",
    y = "Rate (%)",
    color = "Indicator",
    caption = "Source: Pakistan Bureau of Statistics"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", color = "#01411C"),
    plot.subtitle = element_text(size = 12, color = "#666666"),
    axis.title = element_text(size = 11, face = "bold"),
    legend.position = "bottom",
    panel.grid.minor = element_blank()
  )

# 3. Enhanced Exchange Rate Stability (NEW)
exchange_plot <- sbp_data %>%
  mutate(
    exchange_volatility = abs(exchange_rate_pkr_usd - lag(exchange_rate_pkr_usd, 1)),
    stability_index = 100 - (exchange_volatility / exchange_rate_pkr_usd * 100)
  ) %>%
  ggplot(aes(x = year)) +
  geom_line(aes(y = exchange_rate_pkr_usd), color = "#dc3545", size = 1.5) +
  geom_point(aes(y = exchange_rate_pkr_usd), color = "#dc3545", size = 3) +
  geom_smooth(aes(y = exchange_rate_pkr_usd), method = "loess", se = TRUE, 
              color = "#28a745", alpha = 0.2) +
  labs(
    title = "Exchange Rate Dynamics",
    subtitle = "PKR/USD Exchange Rate & Trend",
    x = "Year",
    y = "PKR per USD",
    caption = "Source: State Bank of Pakistan"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", color = "#01411C"),
    plot.subtitle = element_text(size = 12, color = "#666666"),
    axis.title = element_text(size = 11, face = "bold"),
    panel.grid.minor = element_blank()
  )

# Keep existing plots with updates
monetary_inflation_plot <- sbp_data %>%
  select(year, policy_rate) %>%
  left_join(pbs_data %>% select(year, cpi_inflation), by = "year") %>%
  pivot_longer(cols = c(policy_rate, cpi_inflation), 
               names_to = "indicator", values_to = "value") %>%
  mutate(indicator = case_when(
    indicator == "policy_rate" ~ "SBP Policy Rate",
    indicator == "cpi_inflation" ~ "CPI Inflation (PBS)"
  )) %>%
  ggplot(aes(x = year, y = value, color = indicator)) +
  geom_line(size = 1.5, alpha = 0.8) +
  geom_point(size = 3) +
  scale_color_manual(values = c("SBP Policy Rate" = "#1e3d59", 
                               "CPI Inflation (PBS)" = "#dc3545")) +
  labs(
    title = "Monetary Policy vs Inflation",
    subtitle = "SBP Policy Rate vs PBS CPI Inflation",
    x = "Year",
    y = "Rate (%)",
    color = "Indicator",
    caption = "Sources: State Bank of Pakistan, Pakistan Bureau of Statistics"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", color = "#01411C"),
    plot.subtitle = element_text(size = 12, color = "#666666"),
    axis.title = element_text(size = 11, face = "bold"),
    legend.position = "bottom",
    panel.grid.minor = element_blank()
  )

# Updated fiscal plot
fiscal_plot <- mof_data %>%
  ggplot(aes(x = year)) +
  geom_col(aes(y = fiscal_deficit), fill = "#8b0000", alpha = 0.7, width = 0.6) +
  geom_line(aes(y = debt_to_gdp/10), color = "#ff6b6b", size = 1.5) +
  geom_point(aes(y = debt_to_gdp/10), color = "#ff6b6b", size = 3) +
  scale_y_continuous(
    name = "Fiscal Deficit (% of GDP)",
    sec.axis = sec_axis(~.*10, name = "Debt-to-GDP Ratio (%)")
  ) +
  labs(
    title = "Fiscal Performance Indicators",
    subtitle = "Deficit & Debt Trends",
    x = "Year",
    caption = "Source: Ministry of Finance, Pakistan"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", color = "#01411C"),
    plot.subtitle = element_text(size = 12, color = "#666666"),
    axis.title = element_text(size = 11, face = "bold"),
    axis.title.y.right = element_text(color = "#ff6b6b"),
    axis.text.y.right = element_text(color = "#ff6b6b"),
    panel.grid.minor = element_blank()
  )

# Updated sectoral plot
sectoral_plot <- pbs_data %>%
  select(year, agriculture_growth, industrial_growth, services_growth) %>%
  pivot_longer(cols = -year, names_to = "sector", values_to = "growth") %>%
  mutate(sector = case_when(
    sector == "agriculture_growth" ~ "Agriculture",
    sector == "industrial_growth" ~ "Industry", 
    sector == "services_growth" ~ "Services"
  )) %>%
  ggplot(aes(x = year, y = growth, fill = sector)) +
  geom_col(position = "dodge", alpha = 0.8) +
  scale_fill_manual(values = c("Agriculture" = "#2e8b57", 
                              "Industry" = "#4682b4", 
                              "Services" = "#daa520")) +
  labs(
    title = "Sectoral Growth Performance",
    subtitle = "Agriculture, Industry & Services Growth Rates",
    x = "Year",
    y = "Growth Rate (%)",
    fill = "Sector",
    caption = "Source: Pakistan Bureau of Statistics"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", color = "#01411C"),
    plot.subtitle = element_text(size = 12, color = "#666666"),
    axis.title = element_text(size = 11, face = "bold"),
    legend.position = "bottom",
    panel.grid.minor = element_blank()
  )

# Updated external plot
external_plot <- sbp_data %>%
  select(year, forex_reserves, remittances, current_account_balance) %>%
  pivot_longer(cols = -year, names_to = "indicator", values_to = "value") %>%
  mutate(indicator = case_when(
    indicator == "forex_reserves" ~ "Forex Reserves",
    indicator == "remittances" ~ "Remittances",
    indicator == "current_account_balance" ~ "Current Account"
  )) %>%
  ggplot(aes(x = year, y = value, color = indicator)) +
  geom_line(size = 1.2, alpha = 0.8) +
  geom_point(size = 2.5) +
  scale_color_manual(values = c("Forex Reserves" = "#1e3d59",
                               "Remittances" = "#28a745",
                               "Current Account" = "#dc3545")) +
  labs(
    title = "External Sector Indicators",
    subtitle = "Reserves, Remittances & Current Account",
    x = "Year",
    y = "Billion USD",
    color = "Indicator",
    caption = "Source: State Bank of Pakistan"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", color = "#01411C"),
    plot.subtitle = element_text(size = 12, color = "#666666"),
    axis.title = element_text(size = 11, face = "bold"),
    legend.position = "bottom",
    panel.grid.minor = element_blank()
  )
```

# Pakistan Economic Overview (FY2025)

## Row {height=25%}

### Value Boxes {width=20%}
```{r}
#| content: valuebox
#| title: "GDP Growth"
list(
  icon = "trending-up",
  color = "success",
  value = "2.68%"
)
```
```{r}
#| content: valuebox
#| title: "Agriculture"
list(
  icon = "tree",
  color = "warning",
  value = "0.56%"
)
```
```{r}
#| content: valuebox
#| title: "Industries"
list(
  icon = "gear",
  color = "success",
  value = "4.77%"
)
```
```{r}
#| content: valuebox
#| title: "Services"
list(
  icon = "briefcase",
  color = "success",
  value = "2.99%"
)
```
```{r}
#| content: valuebox
#| title: "Per Capita Income (US$)"
list(
  icon = "currency-dollar",
  color = "info",
  value = "1,824"
)
```
```{r}
#| content: valuebox
#| title: "Investment (% of GDP)"
list(
  icon = "graph-up",
  color = "warning",
  value = "13.8%"
)
```
```{r}
#| content: valuebox
#| title: "Savings (% of GDP)"
list(
  icon = "piggy-bank",
  color = "warning",
  value = "14.1%"
)
```

### Main Charts {width=80%}
#### GDP Growth Trend (1990-2024) {width=50%}
```{r}
#| title: "Pakistan GDP Growth Rate (1990-2024)"
if(nrow(gdp_data) > 0) {
  gdp_overview_plot <- gdp_data %>%
    ggplot(aes(x = year, y = value)) +
    geom_line(color = "#01411C", size = 1.3, alpha = 0.9) +
    geom_point(color = "#228B22", size = 2.8, alpha = 0.9) +
    geom_smooth(method = "loess", se = TRUE, color = "#17a2b8", alpha = 0.2, size = 0.8) +
    # Highlight recent performance
    geom_point(data = gdp_data %>% filter(year >= 2020), 
               aes(x = year, y = value), color = "#dc3545", size = 3.5, alpha = 0.8) +
    labs(
      title = "GDP Growth Trend",
      subtitle = "Long-term Performance & Recent Challenges",
      x = "Year",
      y = "GDP Growth Rate (%)",
      caption = "Source: World Bank WDI"
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(size = 16, face = "bold", color = "#01411C"),
      plot.subtitle = element_text(size = 12, color = "#666666"),
      axis.title = element_text(size = 11, face = "bold"),
      panel.grid.minor = element_blank(),
      plot.caption = element_text(size = 9, color = "#888888")
    ) +
    scale_x_continuous(breaks = seq(1990, 2024, 5)) +
    scale_y_continuous(labels = scales::percent_format(scale = 1))
  
  ggplotly(gdp_overview_plot, tooltip = c("x", "y")) %>%
    layout(height = 450)
} else {
  ggplot() + 
    annotate("text", x = 0.5, y = 0.5, label = "GDP Data Loading...", size = 6, color = "#01411C") +
    theme_void()
}
```
#### Trade Balance Analysis {width=50%}
```{r}
#| title: "Trade Performance (WDI Data)"
if(nrow(trade_data) > 0) {
  ggplotly(trade_plot, tooltip = c("x", "y")) %>%
    layout(height = 450)
} else {
  ggplot() + 
    annotate("text", x = 0.5, y = 0.5, label = "Trade Data Loading...", size = 6, color = "#01411C") +
    theme_void()
}
```

# Monetary & Fiscal Policy

## Row {height=100%}

### Key Policy Indicators {width=20%}
```{r}
#| content: valuebox
#| title: "SBP Policy Rate"
list(
  icon = "bank",
  color = "primary",
  value = "11.0%"
)
```
```{r}
#| content: valuebox
#| title: "CPI Inflation (PBS)"
list(
  icon = "graph-down",
  color = "success",
  value = "4.5%"
)
```
```{r}
#| content: valuebox
#| title: "Fiscal Deficit (MOF)"
list(
  icon = "calculator",
  color = "warning",
  value = "5.9% of GDP"
)
```
```{r}
#| content: valuebox
#| title: "Debt-to-GDP (MOF)"
list(
  icon = "graph-down",
  color = "success",
  value = "85.2%"
)
```
```{r}
#| content: valuebox
#| title: "Forex Reserves (SBP)"
list(
  icon = "currency-dollar",
  color = "warning",
  value = "$11.2B"
)
```
```{r}
#| content: valuebox
#| title: "PKR/USD Rate (SBP)"
list(
  icon = "arrow-left-right",
  color = "info",
  value = "Rs. 278.6"
)
```

### Policy Analysis Charts {width=80%}

#### Monetary Policy Analysis {width=100% height=50%}
##### Policy Rate vs Inflation {width=50%}
```{r}
#| title: "Monetary Policy vs Inflation"
ggplotly(monetary_inflation_plot, tooltip = c("x", "y", "colour")) %>%
  layout(
    hoverlabel = list(bgcolor = "white", bordercolor = "black"),
    font = list(family = "Arial", size = 10),
    height = 350
  )
```
##### Money Supply & Credit Growth {width=50%}
```{r}
#| title: "Monetary Aggregates Performance"
# Create money supply and credit growth plot
money_credit_plot <- sbp_data %>%
  select(year, money_supply_growth, credit_to_private_sector) %>%
  pivot_longer(cols = -year, names_to = "indicator", values_to = "value") %>%
  mutate(indicator = case_when(
    indicator == "money_supply_growth" ~ "Money Supply Growth",
    indicator == "credit_to_private_sector" ~ "Credit to Private Sector"
  )) %>%
  ggplot(aes(x = year, y = value, color = indicator)) +
  geom_line(size = 1.4, alpha = 0.8) +
  geom_point(size = 3) +
  geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
  scale_color_manual(values = c("Money Supply Growth" = "#28a745", 
                               "Credit to Private Sector" = "#17a2b8")) +
  labs(
    title = "Money Supply & Credit Trends",
    subtitle = "SBP Monetary Aggregates",
    x = "Year",
    y = "Growth Rate (%)",
    color = "Indicator",
    caption = "Source: State Bank of Pakistan"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", color = "#01411C"),
    plot.subtitle = element_text(size = 12, color = "#666666"),
    axis.title = element_text(size = 11, face = "bold"),
    legend.position = "bottom",
    panel.grid.minor = element_blank()
  )
ggplotly(money_credit_plot, tooltip = c("x", "y", "colour")) %>%
  layout(
    hoverlabel = list(bgcolor = "white", bordercolor = "black"),
    font = list(family = "Arial", size = 10),
    height = 350
  )
```

#### Fiscal & Exchange Rate Analysis {width=100% height=50%}
##### Fiscal Performance {width=50%}
```{r}
#| title: "Government Fiscal Indicators"
ggplotly(fiscal_plot, tooltip = c("x", "y")) %>%
  layout(
    hoverlabel = list(bgcolor = "white", bordercolor = "black"),
    font = list(family = "Arial", size = 10),
    height = 350
  )
```
##### Exchange Rate Dynamics {width=50%}
```{r}
#| title: "PKR/USD Exchange Rate Trends"
ggplotly(exchange_plot, tooltip = c("x", "y")) %>%
  layout(
    hoverlabel = list(bgcolor = "white", bordercolor = "black"),
    font = list(family = "Arial", size = 10),
    height = 350
  )
```


# Fiscal & External Sector

## Row {height=100%}

### Key Fiscal & External Indicators {width=20%}
```{r}
#| content: valuebox
#| title: "Current Account (SBP)"
current_ca_balance <- sbp_data %>% filter(year == current_year) %>% pull(current_account_balance)
list(
  icon = "arrow-left-right",
  color = if_else(current_ca_balance > 0, "success", "warning"),
  value = paste0("$", current_ca_balance, "B")
)
```

```{r}
#| content: valuebox
#| title: "Remittances (SBP)"
current_remittances <- sbp_data %>% filter(year == current_year) %>% pull(remittances)
list(
  icon = "send",
  color = "success",
  value = paste0("$", current_remittances, "B")
)
```

```{r}
#| content: valuebox
#| title: "Money Supply Growth (SBP)"
current_money_supply <- sbp_data %>% filter(year == current_year) %>% pull(money_supply_growth)
list(
  icon = "cash",
  color = if_else(current_money_supply > 15, "warning", "info"),
  value = paste0(current_money_supply, "%")
)
```

```{r}
#| content: valuebox
#| title: "Tax Revenue Growth (MOF)"
current_tax_growth <- mof_data %>% filter(year == current_year) %>% pull(tax_revenue_growth)
list(
  icon = "receipt",
  color = if_else(current_tax_growth > 10, "success", "warning"),
  value = paste0(current_tax_growth, "%")
)
```

### Fiscal & External Analysis {width=80%}

#### Fiscal Performance Analysis {width=100% height=50%}
##### Government Fiscal Indicators {width=50%}
```{r}
#| title: "Government Fiscal Indicators (MOF)"
ggplotly(fiscal_plot, tooltip = c("x", "y")) %>%
  layout(
    hoverlabel = list(bgcolor = "white", bordercolor = "black"),
    font = list(family = "Arial", size = 10),
    height = 350
  )
```

##### Exchange Rate Dynamics {width=50%}
```{r}
#| title: "PKR/USD Exchange Rate Trends"
ggplotly(exchange_plot, tooltip = c("x", "y")) %>%
  layout(
    hoverlabel = list(bgcolor = "white", bordercolor = "black"),
    font = list(family = "Arial", size = 10),
    height = 350
  )
```

#### External Sector Analysis {width=100% height=50%}
##### External Sector Performance {width=50%}
```{r}
#| title: "External Sector Performance (SBP)"
ggplotly(external_plot, tooltip = c("x", "y", "colour")) %>%
  layout(
    hoverlabel = list(bgcolor = "white", bordercolor = "black"),
    font = list(family = "Arial", size = 10),
    height = 350
  )
```

##### Social Development Indicators {width=50%}
```{r}
#| title: "Unemployment & Poverty Indicators"
ggplotly(social_plot, tooltip = c("x", "y", "colour")) %>%
  layout(
    hoverlabel = list(bgcolor = "white", bordercolor = "black"),
    font = list(family = "Arial", size = 10),
    height = 350
  )
```

# Sectoral Analysis

## Row {height=100%}

### Sectoral Performance Indicators {width=20%}
```{r}
#| content: valuebox
#| title: "Unemployment Rate (PBS)"
current_unemployment <- pbs_data %>% filter(year == current_year) %>% pull(unemployment_rate)
list(
  icon = "person-x",
  color = if_else(current_unemployment > 6, "warning", "success"),
  value = paste0(current_unemployment, "%")
)
```

```{r}
#| content: valuebox
#| title: "Private Credit Growth (SBP)"
current_credit_growth <- sbp_data %>% filter(year == current_year) %>% pull(credit_to_private_sector)
list(
  icon = "credit-card",
  color = if_else(current_credit_growth > 5, "success", "warning"),
  value = paste0(current_credit_growth, "%")
)
```

```{r}
#| content: valuebox
#| title: "Food Inflation (PBS)"
current_food_inflation <- pbs_data %>% filter(year == current_year) %>% pull(food_inflation)
list(
  icon = "shopping-cart",
  color = if_else(current_food_inflation > 10, "warning", "success"),
  value = paste0(current_food_inflation, "%")
)
```

```{r}
#| content: valuebox
#| title: "Large Scale Manufacturing (PBS)"
current_lsm <- pbs_data %>% filter(year == current_year) %>% pull(large_scale_manufacturing)
list(
  icon = "factory",
  color = if_else(current_lsm > 0, "success", "danger"),
  value = paste0(current_lsm, "%")
)
```

### Sectoral Performance Analysis {width=80%}

#### Economic Sectors & Manufacturing {width=100% height=50%}
##### Sectoral Growth Performance {width=50%}
```{r}
#| title: "Agriculture, Industry & Services Growth"
ggplotly(sectoral_plot, tooltip = c("x", "y", "fill")) %>%
  layout(
    hoverlabel = list(bgcolor = "white", bordercolor = "black"),
    font = list(family = "Arial", size = 10),
    height = 350
  )
```

##### Manufacturing vs Food Inflation {width=50%}
```{r}
#| title: "Manufacturing Performance vs Food Inflation"
# Create manufacturing and food inflation plot
manufacturing_food_plot <- pbs_data %>%
  select(year, large_scale_manufacturing, food_inflation) %>%
  mutate(
    food_inflation_scaled = food_inflation,
    lsm_scaled = large_scale_manufacturing
  ) %>%
  ggplot(aes(x = year)) +
  geom_col(aes(y = lsm_scaled), fill = "#4682b4", alpha = 0.7, width = 0.6) +
  geom_line(aes(y = food_inflation_scaled), color = "#dc3545", size = 1.5) +
  geom_point(aes(y = food_inflation_scaled), color = "#dc3545", size = 3) +
  geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
  scale_y_continuous(
    name = "Large Scale Manufacturing Growth (%)",
    sec.axis = sec_axis(~., name = "Food Inflation (%)")
  ) +
  labs(
    title = "Manufacturing vs Food Prices",
    subtitle = "LSM Growth (Bars) & Food Inflation (Line)",
    x = "Year",
    caption = "Source: Pakistan Bureau of Statistics"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", color = "#01411C"),
    plot.subtitle = element_text(size = 12, color = "#666666"),
    axis.title = element_text(size = 11, face = "bold"),
    axis.title.y.right = element_text(color = "#dc3545"),
    axis.text.y.right = element_text(color = "#dc3545"),
    panel.grid.minor = element_blank()
  )

ggplotly(manufacturing_food_plot, tooltip = c("x", "y")) %>%
  layout(
    hoverlabel = list(bgcolor = "white", bordercolor = "black"),
    font = list(family = "Arial", size = 10),
    height = 350
  )
```

#### External Sector & Social Development {width=100% height=50%}
##### External Sector Indicators {width=50%}
```{r}
#| title: "Reserves, Remittances & Current Account"
ggplotly(external_plot, tooltip = c("x", "y", "colour")) %>%
  layout(
    hoverlabel = list(bgcolor = "white", bordercolor = "black"),
    font = list(family = "Arial", size = 10),
    height = 350
  )
```

##### Social Development Trends {width=50%}
```{r}
#| title: "Unemployment & Poverty Trends"
ggplotly(social_plot, tooltip = c("x", "y", "colour")) %>%
  layout(
    hoverlabel = list(bgcolor = "white", bordercolor = "black"),
    font = list(family = "Arial", size = 10),
    height = 350
  )
```

# Economic Analysis & Insights

## Row {height=100%}

### Economic Analysis {width=70%}

#### **Pakistan's Economic Performance Analysis (FY2025)**

**🔍 Current Economic Situation:**
Pakistan's economy in FY2025 like many times in the past has shown some **stablisation** with measures under IMF restrictions yielding positive results in key areas:

**📈 Growth & Sectoral Performance:**
- **GDP Growth**: At 2.68%, Pakistan remains in continuously low growth mode despite 
- **Sectoral Divergence**: Agriculture specially crops shows very dismal picture with all major crops showing negative growth with over all growth in the sector (0.56% growth) while Industry leads recovery (4.77%) though large scale manufacturing remains weak
- **Services Sector**: Steady contribution with 2.99% growth, indicating domestic demand contraction as compared to previous years

**💰 Monetary Policy Success:**
- **Inflation Control**: Dramatic improvement from 29.2% (2023) to 4.5% (2024) - government claims a major policy victory but the reality is that this is due to base effect, globally lower oil and commodity prices, and not real improvement in the economy
- **Policy Rate**: SBP maintained accommodative stance with 11% rate, balancing growth and inflation
- **Exchange Rate**: PKR stabilizing around 278.6/USD after volatile period

**🏛️ Fiscal Consolidation:**
- **Deficit Reduction**: Fiscal deficit improved to 5.9% of GDP from 6.6% in 2023 
- **Debt Management**: Debt-to-GDP ratio declining trend showing fiscal discipline
- **Revenue Enhancement**: Tax revenue growth indicates improving collection but its not from new tax measures rather sqeezing the existing tax base

**🌍 External Sector Challenges:**
- **Current Account**: Persistent deficit (-$0.7B) remains a concern
- **Forex Reserves**: At $11.2B, reserves remain critically low for import coverage
- **Trade Balance**: Significant trade deficit continues to pressure external accounts

**🏭 Structural Challenges:**
- **Manufacturing**: Large Scale Manufacturing growth at 1.2% indicates industrial capacity constraints
- **Employment**: Unemployment is very high with deep implications for the society
- **Poverty**: High poverty rate (35.1%) remains the most pressing social challenge

**📊 Policy Recommendations:**
1. **Export Diversification**: Focus on value-added exports to reduce trade deficit
2. **Investment Climate**: Improve ease of doing business to attract FDI
3. **Human Development**: Targeted poverty alleviation and job creation programs
4. **Reserve Building**: Implement strategies to increase forex reserves
5. **Structural Reforms**: Continue energy sector and tax administration reforms

**🎯 Outlook:**
The economy shows signs of **stabilization** with inflation under control and growth recovering. However, **external vulnerabilities** and **structural challenges** require sustained policy focus for sustainable development.

#### **Key Performance Indicators Summary**

| **Indicator** | **Current** | **Previous** | **Status** |
|---------------|-------------|--------------|------------|
| GDP Growth | 2.68% | Variable | 🔴  |Low Growth |
| Inflation | 4.5% | 29.2% | 🟢 Excellent but no govt role|
| Policy Rate | 11.0% | 22.0% | 🟡 Accommodative |
| Fiscal Deficit | 5.9% | 6.6% | 🟡 Improving |
| Forex Reserves | $11.2B | $13.4B | 🔴 Critical |
| Current Account | -$0.7B | $0.5B | 🟡 Manageable |

### Data Sources & Technical Info {width=30%}

#### **Data Integration**

**🏛️ State Bank of Pakistan (SBP)**
- Monetary policy rates
- Exchange rates & reserves
- Banking statistics
- External sector data

**💰 Ministry of Finance (MOF)**
- Fiscal deficit & debt metrics
- Government revenue & expenditure
- Budget analysis

**📊 Pakistan Bureau of Statistics (PBS)**
- CPI & inflation data
- Sectoral growth rates
- Employment statistics
- Manufacturing indices

**🌍 World Bank (WDI)**
- Long-term economic trends
- International comparisons
- Development indicators
- Trade statistics

#### **Technical Features**
✅ **Real-time data integration**  
✅ **Multi-source validation**  
✅ **Parallel processing**  
✅ **CSV caching for performance**  
✅ **Interactive visualizations**  
✅ **Professional analysis**

#### **Update Schedule**
- **Monthly**: Key indicators
- **Quarterly**: Detailed analysis
- **Annual**: Comprehensive review

#### **Data Quality**
- ✅ Official government sources
- ✅ International standards
- ✅ Cross-validation methods
- ✅ Transparency in methodology

---

**📅 Last Updated:** `r Sys.Date()`  
**🔧 Built with:** R, Quarto, Plotly  
**📊 Dashboard Version:** 2.0  
**👨‍💼 Created by:** [Zahid Asghar](https://zahid.quartod.pub)